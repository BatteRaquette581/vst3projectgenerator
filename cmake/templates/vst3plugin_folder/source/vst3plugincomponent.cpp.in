// @SMTG_SOURCE_COPYRIGHT_HEADER@

#include "@SMTG_PREFIX_FOR_FILENAMES@component.h"
#include "@SMTG_PREFIX_FOR_FILENAMES@cids.h"

using namespace Steinberg;

namespace @SMTG_VENDOR_NAMESPACE@ {
//------------------------------------------------------------------------
// @SMTG_PLUGIN_CLASS_NAME@
//------------------------------------------------------------------------
@SMTG_PLUGIN_CLASS_NAME@::@SMTG_PLUGIN_CLASS_NAME@ ()
{
	setControllerClass (@SMTG_PLUGIN_CLASS_NAME@ControllerUID);
}

//------------------------------------------------------------------------
@SMTG_PLUGIN_CLASS_NAME@::~@SMTG_PLUGIN_CLASS_NAME@ ()
{}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@::initialize (FUnknown* context)
{
	//---always initialize the parent-------
	tresult result = AudioEffect::initialize (context);
	// if everything Ok, continue
	if (result != kResultOk)
	{
		return result;
	}

	@SMTG_EFFECT_AUDIO_BUSSES_CODE_SNIPPET@

	@SMTG_EFFECT_EVENT_BUSSES_CODE_SNIPPET@

	return kResultOk;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@::terminate ()
{
	return AudioEffect::terminate ();
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@::setActive (TBool state)
{
	return AudioEffect::setActive (state);
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@::process (Vst::ProcessData& data)
{
	// Here you have to implement your processing

	return kResultOk;
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@::setupProcessing (Vst::ProcessSetup& newSetup)
{
	return AudioEffect::setupProcessing (newSetup);
}

//------------------------------------------------------------------------
tresult PLUGIN_API @SMTG_PLUGIN_CLASS_NAME@::canProcessSampleSize (int32 symbolicSampleSize)
{
	// by default kSample32 is supported
	if (symbolicSampleSize == Vst::kSample32)
		return kResultTrue;

	// disable the following comment if your processing support kSample64
	/* if (symbolicSampleSize == Vst::kSample64)
		return kResultTrue; */

	return kResultFalse;
}

//------------------------------------------------------------------------
} // namespace @SMTG_VENDOR_NAMESPACE@